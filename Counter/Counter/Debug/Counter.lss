
Counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000002ce  00000362  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080010e  0080010e  00000370  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e1  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000854  00000000  00000000  00000e01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ea  00000000  00000000  00001655  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001a40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000454  00000000  00000000  00001ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000018e  00000000  00000000  00001f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000020c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	59 c0       	rjmp	.+178    	; 0xc8 <__vector_5>
  16:	00 00       	nop
  18:	80 c0       	rjmp	.+256    	; 0x11a <__vector_6>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	d6 c0       	rjmp	.+428    	; 0x1d2 <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ec       	ldi	r30, 0xCE	; 206
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 31       	cpi	r26, 0x1D	; 29
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	b2 d0       	rcall	.+356    	; 0x228 <main>
  c4:	02 c1       	rjmp	.+516    	; 0x2ca <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_5>:
int count = 0;
int Stop_count = 0;

unsigned char timer0Cnt = 0;

SIGNAL(INT4_vect){
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	
	if(state == STOP){
  d6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <state>
  da:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <state+0x1>
  de:	00 97       	sbiw	r24, 0x00	; 0
  e0:	39 f4       	brne	.+14     	; 0xf0 <__vector_5+0x28>
		state = GO;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <state+0x1>
  ea:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <state>
  ee:	0e c0       	rjmp	.+28     	; 0x10c <__vector_5+0x44>
	}
	else if(state == GO){
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	61 f4       	brne	.+24     	; 0x10c <__vector_5+0x44>
		
		state = STOP;
  f4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <state+0x1>
  f8:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <state>
		Stop_count = count;
  fc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 100:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <count+0x1>
 104:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <Stop_count+0x1>
 108:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <Stop_count>
	}
}
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <__vector_6>:

SIGNAL(INT5_vect){
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
	
	count = 0;
 124:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <count+0x1>
 128:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <count>
	Stop_count = 0;
 12c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <Stop_count+0x1>
 130:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <Stop_count>
}
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <FND_Count>:

int FND_Count(int count){
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	ec 01       	movw	r28, r24

	SW_count[0] = (count) % 10;
 144:	2a e0       	ldi	r18, 0x0A	; 10
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	b9 01       	movw	r22, r18
 14a:	98 d0       	rcall	.+304    	; 0x27c <__divmodhi4>
 14c:	e5 e1       	ldi	r30, 0x15	; 21
 14e:	f1 e0       	ldi	r31, 0x01	; 1
 150:	91 83       	std	Z+1, r25	; 0x01
 152:	80 83       	st	Z, r24
	SW_count[1] = (count / 10) % 10;
 154:	cb 01       	movw	r24, r22
 156:	b9 01       	movw	r22, r18
 158:	91 d0       	rcall	.+290    	; 0x27c <__divmodhi4>
 15a:	93 83       	std	Z+3, r25	; 0x03
 15c:	82 83       	std	Z+2, r24	; 0x02
	SW_count[2] = (count / 100) % 10;
 15e:	ce 01       	movw	r24, r28
 160:	64 e6       	ldi	r22, 0x64	; 100
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	8b d0       	rcall	.+278    	; 0x27c <__divmodhi4>
 166:	cb 01       	movw	r24, r22
 168:	b9 01       	movw	r22, r18
 16a:	88 d0       	rcall	.+272    	; 0x27c <__divmodhi4>
 16c:	95 83       	std	Z+5, r25	; 0x05
 16e:	84 83       	std	Z+4, r24	; 0x04
	SW_count[3] = (count / 1000) % 10;
 170:	ce 01       	movw	r24, r28
 172:	68 ee       	ldi	r22, 0xE8	; 232
 174:	73 e0       	ldi	r23, 0x03	; 3
 176:	82 d0       	rcall	.+260    	; 0x27c <__divmodhi4>
 178:	cb 01       	movw	r24, r22
 17a:	b9 01       	movw	r22, r18
 17c:	7f d0       	rcall	.+254    	; 0x27c <__divmodhi4>
 17e:	97 83       	std	Z+7, r25	; 0x07
 180:	86 83       	std	Z+6, r24	; 0x06
 182:	80 e0       	ldi	r24, 0x00	; 0

	for(int j = 0 ; j < 4 ; j++){
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	18 c0       	rjmp	.+48     	; 0x1b8 <FND_Count+0x7a>
 188:	fc 01       	movw	r30, r24
		
		PORTB = FND2[j];
 18a:	e0 50       	subi	r30, 0x00	; 0
 18c:	ff 4f       	sbci	r31, 0xFF	; 255
 18e:	20 81       	ld	r18, Z
 190:	28 bb       	out	0x18, r18	; 24
 192:	fc 01       	movw	r30, r24
		PORTA = FND1[SW_count[j]];
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	eb 5e       	subi	r30, 0xEB	; 235
 19a:	fe 4f       	sbci	r31, 0xFE	; 254
 19c:	01 90       	ld	r0, Z+
 19e:	f0 81       	ld	r31, Z
 1a0:	e0 2d       	mov	r30, r0
 1a2:	ec 5f       	subi	r30, 0xFC	; 252
 1a4:	fe 4f       	sbci	r31, 0xFE	; 254
 1a6:	20 81       	ld	r18, Z
 1a8:	2b bb       	out	0x1b, r18	; 27
 1aa:	ea e4       	ldi	r30, 0x4A	; 74
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ac:	f4 e2       	ldi	r31, 0x24	; 36
 1ae:	31 97       	sbiw	r30, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <FND_Count+0x70>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <FND_Count+0x76>
 1b4:	00 00       	nop
 1b6:	01 96       	adiw	r24, 0x01	; 1
	SW_count[0] = (count) % 10;
	SW_count[1] = (count / 10) % 10;
	SW_count[2] = (count / 100) % 10;
	SW_count[3] = (count / 1000) % 10;

	for(int j = 0 ; j < 4 ; j++){
 1b8:	84 30       	cpi	r24, 0x04	; 4
 1ba:	91 05       	cpc	r25, r1
 1bc:	2c f3       	brlt	.-54     	; 0x188 <FND_Count+0x4a>
 1be:	cf 30       	cpi	r28, 0x0F	; 15
		PORTA = FND1[SW_count[j]];
		_delay_ms(5);

	}
	
	if(count >= 9999){
 1c0:	d7 42       	sbci	r29, 0x27	; 39
 1c2:	24 f0       	brlt	.+8      	; 0x1cc <FND_Count+0x8e>
 1c4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <Stop_count+0x1>
		
		count = 0;
		Stop_count = 0;
 1c8:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <Stop_count>
 1cc:	df 91       	pop	r29
	}
	
};
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <__vector_9>:
 1d2:	1f 92       	push	r1

SIGNAL(TIMER2_COMP_vect){
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	8f 93       	push	r24
 1de:	9f 93       	push	r25
	
	cli();	    // 전체 인터럽트를 금지
 1e0:	f8 94       	cli
	OCR2 += 72; // 0.01초 후에 인터럽트 발생
 1e2:	83 b5       	in	r24, 0x23	; 35
 1e4:	88 5b       	subi	r24, 0xB8	; 184
 1e6:	83 bd       	out	0x23, r24	; 35
	timer0Cnt++; // timer0Cnt 변수를 1 증가
 1e8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 1ec:	8f 5f       	subi	r24, 0xFF	; 255
 1ee:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
	
	if(timer0Cnt == 100){
 1f2:	84 36       	cpi	r24, 0x64	; 100
 1f4:	89 f4       	brne	.+34     	; 0x218 <__vector_9+0x46>
		
		// 0.01 * 50 = 0.5s 0.5초를 얻기 위한 카운트 횟수
		if(state == GO) // Time_STOP 이 0인 경우에만
 1f6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <state>
 1fa:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <state+0x1>
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	49 f4       	brne	.+18     	; 0x214 <__vector_9+0x42>
		{
			count++;
 202:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 206:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <count+0x1>
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <count+0x1>
 210:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <count>
		}
		timer0Cnt = 0;
 214:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
	}
	sei();
 218:	78 94       	sei
}
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <main>:

int main(){

	DDRA = 0xFF; // PORTA 의 출력 1111 1111 FND의 A~H 까지 연결
 228:	8f ef       	ldi	r24, 0xFF	; 255
 22a:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xF0; // PORTB 의 출력 1111 FND의 C0~C3까지 연결
 22c:	80 ef       	ldi	r24, 0xF0	; 240
 22e:	87 bb       	out	0x17, r24	; 23
	DDRE = 0x00; // PORTE 의 입력 0000 0000 E 의 입력은 스위치와 연결
 230:	12 b8       	out	0x02, r1	; 2
	
	TCCR2 = 0x05;  // 프리스케일러 1024
 232:	85 e0       	ldi	r24, 0x05	; 5
 234:	85 bd       	out	0x25, r24	; 37
	OCR2 = 72;
 236:	88 e4       	ldi	r24, 0x48	; 72
 238:	83 bd       	out	0x23, r24	; 35
	TIMSK = 0x80;
 23a:	80 e8       	ldi	r24, 0x80	; 128
 23c:	87 bf       	out	0x37, r24	; 55
	TIFR |= 1 << OCF2;
 23e:	86 b7       	in	r24, 0x36	; 54
 240:	80 68       	ori	r24, 0x80	; 128
 242:	86 bf       	out	0x36, r24	; 54
	
	EIMSK = (1 << INT4) | (1 << INT5); // 외부 인터럽트 4, 5번 사용
 244:	80 e3       	ldi	r24, 0x30	; 48
 246:	89 bf       	out	0x39, r24	; 57
	EICRB = (1 << ISC41) | (1 << ISC51); // 인터럽트 4, 5번 모두 하강에지에서 동작하도록 설계
 248:	8a e0       	ldi	r24, 0x0A	; 10
 24a:	8a bf       	out	0x3a, r24	; 58
	EIFR = 0x10;   // 인터럽트 4 플래그를 클리어
 24c:	80 e1       	ldi	r24, 0x10	; 16
 24e:	88 bf       	out	0x38, r24	; 56
	sei();
 250:	78 94       	sei

	while(1){
		
		if(state == GO){
 252:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <state>
 256:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <state+0x1>
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	91 05       	cpc	r25, r1
 25e:	31 f4       	brne	.+12     	; 0x26c <main+0x44>
			FND_Count(count);
 260:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <count>
 264:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <count+0x1>
 268:	6a df       	rcall	.-300    	; 0x13e <FND_Count>
 26a:	f3 cf       	rjmp	.-26     	; 0x252 <main+0x2a>
		}
		else if(state == STOP){
 26c:	89 2b       	or	r24, r25
 26e:	89 f7       	brne	.-30     	; 0x252 <main+0x2a>
			FND_Count(Stop_count);
 270:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <Stop_count>
 274:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <Stop_count+0x1>
 278:	62 df       	rcall	.-316    	; 0x13e <FND_Count>
 27a:	eb cf       	rjmp	.-42     	; 0x252 <main+0x2a>

0000027c <__divmodhi4>:
 27c:	97 fb       	bst	r25, 7
 27e:	07 2e       	mov	r0, r23
 280:	16 f4       	brtc	.+4      	; 0x286 <__divmodhi4+0xa>
 282:	00 94       	com	r0
 284:	06 d0       	rcall	.+12     	; 0x292 <__divmodhi4_neg1>
 286:	77 fd       	sbrc	r23, 7
 288:	08 d0       	rcall	.+16     	; 0x29a <__divmodhi4_neg2>
 28a:	0b d0       	rcall	.+22     	; 0x2a2 <__udivmodhi4>
 28c:	07 fc       	sbrc	r0, 7
 28e:	05 d0       	rcall	.+10     	; 0x29a <__divmodhi4_neg2>
 290:	3e f4       	brtc	.+14     	; 0x2a0 <__divmodhi4_exit>

00000292 <__divmodhi4_neg1>:
 292:	90 95       	com	r25
 294:	81 95       	neg	r24
 296:	9f 4f       	sbci	r25, 0xFF	; 255
 298:	08 95       	ret

0000029a <__divmodhi4_neg2>:
 29a:	70 95       	com	r23
 29c:	61 95       	neg	r22
 29e:	7f 4f       	sbci	r23, 0xFF	; 255

000002a0 <__divmodhi4_exit>:
 2a0:	08 95       	ret

000002a2 <__udivmodhi4>:
 2a2:	aa 1b       	sub	r26, r26
 2a4:	bb 1b       	sub	r27, r27
 2a6:	51 e1       	ldi	r21, 0x11	; 17
 2a8:	07 c0       	rjmp	.+14     	; 0x2b8 <__udivmodhi4_ep>

000002aa <__udivmodhi4_loop>:
 2aa:	aa 1f       	adc	r26, r26
 2ac:	bb 1f       	adc	r27, r27
 2ae:	a6 17       	cp	r26, r22
 2b0:	b7 07       	cpc	r27, r23
 2b2:	10 f0       	brcs	.+4      	; 0x2b8 <__udivmodhi4_ep>
 2b4:	a6 1b       	sub	r26, r22
 2b6:	b7 0b       	sbc	r27, r23

000002b8 <__udivmodhi4_ep>:
 2b8:	88 1f       	adc	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	5a 95       	dec	r21
 2be:	a9 f7       	brne	.-22     	; 0x2aa <__udivmodhi4_loop>
 2c0:	80 95       	com	r24
 2c2:	90 95       	com	r25
 2c4:	bc 01       	movw	r22, r24
 2c6:	cd 01       	movw	r24, r26
 2c8:	08 95       	ret

000002ca <_exit>:
 2ca:	f8 94       	cli

000002cc <__stop_program>:
 2cc:	ff cf       	rjmp	.-2      	; 0x2cc <__stop_program>
