
Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001de  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b8c  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000854  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b9  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040c  00000000  00000000  00001ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003aa  00000000  00000000  00001ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000229a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ed       	ldi	r30, 0xDE	; 222
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	8b d0       	rcall	.+278    	; 0x1ca <main>
  b4:	92 c0       	rjmp	.+292    	; 0x1da <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <Init>:
	0x39,   0x5e,   0x79,   0x71
};

void Init()
{
	DDRA = 0xF8;	//상위 5비트는 출력(Row:가로) 하위 3비트는 입력(Cow:세로)
  b8:	88 ef       	ldi	r24, 0xF8	; 248
  ba:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	87 bb       	out	0x17, r24	; 23
  c0:	08 95       	ret

000000c2 <keyScan>:

unsigned int keyScan()
{
	int num = 0;
	//R0
	PORTA = 0x10;	// 0b 0001 0000
  c2:	80 e1       	ldi	r24, 0x10	; 16
  c4:	8b bb       	out	0x1b, r24	; 27
	if(((PINA >> 0) & 0x01) == 1) num = 1;	//C0	0b 1111 1110
  c6:	c8 99       	sbic	0x19, 0	; 25
  c8:	03 c0       	rjmp	.+6      	; 0xd0 <keyScan+0xe>
//}


unsigned int keyScan()
{
	int num = 0;
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <keyScan+0x12>
	//R0
	PORTA = 0x10;	// 0b 0001 0000
	if(((PINA >> 0) & 0x01) == 1) num = 1;	//C0	0b 1111 1110
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	ef ef       	ldi	r30, 0xFF	; 255
  d6:	f7 e4       	ldi	r31, 0x47	; 71
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <keyScan+0x16>
  dc:	00 c0       	rjmp	.+0      	; 0xde <keyScan+0x1c>
  de:	00 00       	nop
	_delay_ms(10);
	if(((PINA >> 1) & 0x01) == 1) num = 5;	//C1	0b 1111 1101
  e0:	c9 9b       	sbis	0x19, 1	; 25
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <keyScan+0x26>
  e4:	85 e0       	ldi	r24, 0x05	; 5
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	ef ef       	ldi	r30, 0xFF	; 255
  ea:	f7 e4       	ldi	r31, 0x47	; 71
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <keyScan+0x2a>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <keyScan+0x30>
  f2:	00 00       	nop
	_delay_ms(10);
	if(((PINA >> 2) & 0x01) == 1) num = 6;	//C2	0b 1111 1011
  f4:	ca 9b       	sbis	0x19, 2	; 25
  f6:	02 c0       	rjmp	.+4      	; 0xfc <keyScan+0x3a>
  f8:	86 e0       	ldi	r24, 0x06	; 6
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	ef ef       	ldi	r30, 0xFF	; 255
  fe:	f7 e4       	ldi	r31, 0x47	; 71
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <keyScan+0x3e>
 104:	00 c0       	rjmp	.+0      	; 0x106 <keyScan+0x44>
 106:	00 00       	nop
	_delay_ms(10);

	//R1
	PORTA = 0x20;	// 0b 0010 0000
 108:	20 e2       	ldi	r18, 0x20	; 32
 10a:	2b bb       	out	0x1b, r18	; 27
	if(((PINA >> 0) & 0x01) == 1) num = 4;	//C0	0b 1111 1110
 10c:	c8 9b       	sbis	0x19, 0	; 25
 10e:	02 c0       	rjmp	.+4      	; 0x114 <keyScan+0x52>
 110:	84 e0       	ldi	r24, 0x04	; 4
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	ef ef       	ldi	r30, 0xFF	; 255
 116:	f7 e4       	ldi	r31, 0x47	; 71
 118:	31 97       	sbiw	r30, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <keyScan+0x56>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <keyScan+0x5c>
 11e:	00 00       	nop
	_delay_ms(10);
	if(((PINA >> 1) & 0x01) == 1) num = 8;	//C1	0b 1111 1101
 120:	c9 9b       	sbis	0x19, 1	; 25
 122:	02 c0       	rjmp	.+4      	; 0x128 <keyScan+0x66>
 124:	88 e0       	ldi	r24, 0x08	; 8
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	ef ef       	ldi	r30, 0xFF	; 255
 12a:	f7 e4       	ldi	r31, 0x47	; 71
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <keyScan+0x6a>
 130:	00 c0       	rjmp	.+0      	; 0x132 <keyScan+0x70>
 132:	00 00       	nop
	_delay_ms(10);
	if(((PINA >> 2) & 0x01) == 1) num = 9;	//C2	0b 1111 1011
 134:	ca 9b       	sbis	0x19, 2	; 25
 136:	02 c0       	rjmp	.+4      	; 0x13c <keyScan+0x7a>
 138:	89 e0       	ldi	r24, 0x09	; 9
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	ef ef       	ldi	r30, 0xFF	; 255
 13e:	f7 e4       	ldi	r31, 0x47	; 71
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <keyScan+0x7e>
 144:	00 c0       	rjmp	.+0      	; 0x146 <keyScan+0x84>
 146:	00 00       	nop
	_delay_ms(10);

	//R2
	PORTA = 0x40;	// 0b 0100 0000
 148:	20 e4       	ldi	r18, 0x40	; 64
 14a:	2b bb       	out	0x1b, r18	; 27
	if(((PINA >> 0) & 0x01) == 1) num = 7;	//C0	0b 1111 1110
 14c:	c8 9b       	sbis	0x19, 0	; 25
 14e:	02 c0       	rjmp	.+4      	; 0x154 <keyScan+0x92>
 150:	87 e0       	ldi	r24, 0x07	; 7
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	ef ef       	ldi	r30, 0xFF	; 255
 156:	f7 e4       	ldi	r31, 0x47	; 71
 158:	31 97       	sbiw	r30, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <keyScan+0x96>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <keyScan+0x9c>
 15e:	00 00       	nop
	_delay_ms(10);
	if(((PINA >> 1) & 0x01) == 1) num = 11;	//C1	0b 1111 1101
 160:	c9 9b       	sbis	0x19, 1	; 25
 162:	02 c0       	rjmp	.+4      	; 0x168 <keyScan+0xa6>
 164:	8b e0       	ldi	r24, 0x0B	; 11
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	ef ef       	ldi	r30, 0xFF	; 255
 16a:	f7 e4       	ldi	r31, 0x47	; 71
 16c:	31 97       	sbiw	r30, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <keyScan+0xaa>
 170:	00 c0       	rjmp	.+0      	; 0x172 <keyScan+0xb0>
 172:	00 00       	nop
	_delay_ms(10);
	if(((PINA >> 2) & 0x01) == 1) num = 12;	//C2	0b 1111 1011
 174:	ca 9b       	sbis	0x19, 2	; 25
 176:	02 c0       	rjmp	.+4      	; 0x17c <keyScan+0xba>
 178:	8c e0       	ldi	r24, 0x0C	; 12
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	ef ef       	ldi	r30, 0xFF	; 255
 17e:	f7 e4       	ldi	r31, 0x47	; 71
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <keyScan+0xbe>
 184:	00 c0       	rjmp	.+0      	; 0x186 <keyScan+0xc4>
 186:	00 00       	nop
	_delay_ms(10);
	
	//R3
	PORTA = 0x08;	// 0b 0000 1000
 188:	28 e0       	ldi	r18, 0x08	; 8
 18a:	2b bb       	out	0x1b, r18	; 27
	if(((PINA >> 0) & 0x01) == 1) num = 10;	//C0	0b 1111 1110
 18c:	c8 9b       	sbis	0x19, 0	; 25
 18e:	02 c0       	rjmp	.+4      	; 0x194 <keyScan+0xd2>
 190:	8a e0       	ldi	r24, 0x0A	; 10
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	ef ef       	ldi	r30, 0xFF	; 255
 196:	f7 e4       	ldi	r31, 0x47	; 71
 198:	31 97       	sbiw	r30, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <keyScan+0xd6>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <keyScan+0xdc>
 19e:	00 00       	nop
	_delay_ms(10);
	if(((PINA >> 1) & 0x01) == 1) num = 2;	//C1	0b 1111 1101
 1a0:	c9 9b       	sbis	0x19, 1	; 25
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <keyScan+0xe6>
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	ef ef       	ldi	r30, 0xFF	; 255
 1aa:	f7 e4       	ldi	r31, 0x47	; 71
 1ac:	31 97       	sbiw	r30, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <keyScan+0xea>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <keyScan+0xf0>
 1b2:	00 00       	nop
	_delay_ms(10);
	if(((PINA >> 2) & 0x01) == 1) num = 3;	//C2	0b 1111 1011
 1b4:	ca 9b       	sbis	0x19, 2	; 25
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <keyScan+0xfa>
 1b8:	83 e0       	ldi	r24, 0x03	; 3
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	ef ef       	ldi	r30, 0xFF	; 255
 1be:	f7 e4       	ldi	r31, 0x47	; 71
 1c0:	31 97       	sbiw	r30, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <keyScan+0xfe>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <keyScan+0x104>
 1c6:	00 00       	nop
	_delay_ms(10);
	
	return num;
}
 1c8:	08 95       	ret

000001ca <main>:


int main(void)
{
	Init();
 1ca:	76 df       	rcall	.-276    	; 0xb8 <Init>
	
	unsigned int key = 0;
	
	while (1)
	{
		key = keyScan();
 1cc:	7a df       	rcall	.-268    	; 0xc2 <keyScan>
 1ce:	80 50       	subi	r24, 0x00	; 0
		PORTB = FND_DATA_TBL[key];
 1d0:	9f 4f       	sbci	r25, 0xFF	; 255
 1d2:	fc 01       	movw	r30, r24
 1d4:	80 81       	ld	r24, Z
 1d6:	88 bb       	out	0x18, r24	; 24
 1d8:	f9 cf       	rjmp	.-14     	; 0x1cc <main+0x2>

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
