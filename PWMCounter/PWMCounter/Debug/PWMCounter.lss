
PWMCounter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000001dc  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009dd  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b8  00000000  00000000  00000ced  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000368  00000000  00000000  000015a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001910  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000448  00000000  00000000  00001974  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014f  00000000  00000000  00001dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001f0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ed       	ldi	r30, 0xDC	; 220
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	10 d0       	rcall	.+32     	; 0xd4 <main>
  b4:	91 c0       	rjmp	.+290    	; 0x1d8 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <putch>:
	
	unsigned char i = 0;
	while(str[i]!='\0')
	putch(str[i++]);
	
}
  b8:	5d 9b       	sbis	0x0b, 5	; 11
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <putch>
  bc:	8c b9       	out	0x0c, r24	; 12
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	80 62       	ori	r24, 0x20	; 32
  c2:	8b b9       	out	0x0b, r24	; 11
  c4:	08 95       	ret

000000c6 <getch>:

unsigned char getch(){
	
	unsigned char data;
	while((UCSR0A & 0x80) == 0); // 데이터를 받을 때까지 대기
  c6:	5f 9b       	sbis	0x0b, 7	; 11
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <getch>
	data = UDR0;				 // 수신된 데이터는 UDR0에 저장
  ca:	8c b1       	in	r24, 0x0c	; 12
	UCSR0A |= 0x80;
  cc:	9b b1       	in	r25, 0x0b	; 11
  ce:	90 68       	ori	r25, 0x80	; 128
  d0:	9b b9       	out	0x0b, r25	; 11
	return data;				 // 읽어온 문자를 반환
}
  d2:	08 95       	ret

000000d4 <main>:

int main(){
	
	unsigned char RX_data = 0;
	
	UCSR0A = 0x00;
  d4:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0x18;  // Rx, Tx
  d6:	88 e1       	ldi	r24, 0x18	; 24
  d8:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06;
  da:	86 e0       	ldi	r24, 0x06	; 6
  dc:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0H = 0x00;
  e0:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 3;
  e4:	83 e0       	ldi	r24, 0x03	; 3
  e6:	89 b9       	out	0x09, r24	; 9
	
    DDRE = 0x08;   //포트E PE3을 출력 나머지는 입력포트로 설정한다.
  e8:	88 e0       	ldi	r24, 0x08	; 8
  ea:	82 b9       	out	0x02, r24	; 2
	
	//Buzzer를 PE3에 연결
	
	TCCR3A = 0x00;   //WGM3(1:0) = "00"
  ec:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	TCCR3B = 0x19;   //WGM3(3:2) = "11" ,  CS3(2:0) = "001"  1분주 사용
  f0:	89 e1       	ldi	r24, 0x19	; 25
  f2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	TCCR3C = 0x00;   //WGM3(3:0) = "1110", Fast PWM, 모드 14
  f6:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
	
    TCNT3 = 0x0000;    //타이머3 카운터 초기화
  fa:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  fe:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	8f e9       	ldi	r24, 0x9F	; 159
 106:	95 e0       	ldi	r25, 0x05	; 5
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x34>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x3e>
 112:	00 00       	nop
	 
	while (1){
		
		_delay_ms(250);
		TCCR3A = 0x00;
 114:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
		RX_data = getch();
 118:	d6 df       	rcall	.-84     	; 0xc6 <getch>
		
		if((RX_data >= 0x30) && (RX_data <= 0x37)){
 11a:	90 ed       	ldi	r25, 0xD0	; 208
 11c:	98 0f       	add	r25, r24
 11e:	98 30       	cpi	r25, 0x08	; 8
 120:	80 f7       	brcc	.-32     	; 0x102 <main+0x2e>
			
			int INT_data = RX_data - 0x30;
 122:	c8 2f       	mov	r28, r24
 124:	d0 e0       	ldi	r29, 0x00	; 0
 126:	e0 97       	sbiw	r28, 0x30	; 48
			
			ICR3 = 7372800 / DoReMi[INT_data] / 2;
 128:	fe 01       	movw	r30, r28
 12a:	ee 0f       	add	r30, r30
 12c:	ff 1f       	adc	r31, r31
 12e:	e8 5f       	subi	r30, 0xF8	; 248
 130:	fe 4f       	sbci	r31, 0xFE	; 254
 132:	20 81       	ld	r18, Z
 134:	31 81       	ldd	r19, Z+1	; 0x01
 136:	40 e0       	ldi	r20, 0x00	; 0
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	70 e4       	ldi	r23, 0x40	; 64
 13e:	88 e3       	ldi	r24, 0x38	; 56
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0c d0       	rcall	.+24     	; 0x15c <__divmodsi4>
 144:	30 93 81 00 	sts	0x0081, r19	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 148:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
			TCCR3A = 0x40;  //PE4로 출력
 14c:	80 e4       	ldi	r24, 0x40	; 64
 14e:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
			putch(Output[INT_data]);
 152:	c0 50       	subi	r28, 0x00	; 0
 154:	df 4f       	sbci	r29, 0xFF	; 255
 156:	88 81       	ld	r24, Y
 158:	af df       	rcall	.-162    	; 0xb8 <putch>
 15a:	d3 cf       	rjmp	.-90     	; 0x102 <main+0x2e>

0000015c <__divmodsi4>:
 15c:	05 2e       	mov	r0, r21
 15e:	97 fb       	bst	r25, 7
 160:	16 f4       	brtc	.+4      	; 0x166 <__divmodsi4+0xa>
 162:	00 94       	com	r0
 164:	0f d0       	rcall	.+30     	; 0x184 <__negsi2>
 166:	57 fd       	sbrc	r21, 7
 168:	05 d0       	rcall	.+10     	; 0x174 <__divmodsi4_neg2>
 16a:	14 d0       	rcall	.+40     	; 0x194 <__udivmodsi4>
 16c:	07 fc       	sbrc	r0, 7
 16e:	02 d0       	rcall	.+4      	; 0x174 <__divmodsi4_neg2>
 170:	46 f4       	brtc	.+16     	; 0x182 <__divmodsi4_exit>
 172:	08 c0       	rjmp	.+16     	; 0x184 <__negsi2>

00000174 <__divmodsi4_neg2>:
 174:	50 95       	com	r21
 176:	40 95       	com	r20
 178:	30 95       	com	r19
 17a:	21 95       	neg	r18
 17c:	3f 4f       	sbci	r19, 0xFF	; 255
 17e:	4f 4f       	sbci	r20, 0xFF	; 255
 180:	5f 4f       	sbci	r21, 0xFF	; 255

00000182 <__divmodsi4_exit>:
 182:	08 95       	ret

00000184 <__negsi2>:
 184:	90 95       	com	r25
 186:	80 95       	com	r24
 188:	70 95       	com	r23
 18a:	61 95       	neg	r22
 18c:	7f 4f       	sbci	r23, 0xFF	; 255
 18e:	8f 4f       	sbci	r24, 0xFF	; 255
 190:	9f 4f       	sbci	r25, 0xFF	; 255
 192:	08 95       	ret

00000194 <__udivmodsi4>:
 194:	a1 e2       	ldi	r26, 0x21	; 33
 196:	1a 2e       	mov	r1, r26
 198:	aa 1b       	sub	r26, r26
 19a:	bb 1b       	sub	r27, r27
 19c:	fd 01       	movw	r30, r26
 19e:	0d c0       	rjmp	.+26     	; 0x1ba <__udivmodsi4_ep>

000001a0 <__udivmodsi4_loop>:
 1a0:	aa 1f       	adc	r26, r26
 1a2:	bb 1f       	adc	r27, r27
 1a4:	ee 1f       	adc	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	a2 17       	cp	r26, r18
 1aa:	b3 07       	cpc	r27, r19
 1ac:	e4 07       	cpc	r30, r20
 1ae:	f5 07       	cpc	r31, r21
 1b0:	20 f0       	brcs	.+8      	; 0x1ba <__udivmodsi4_ep>
 1b2:	a2 1b       	sub	r26, r18
 1b4:	b3 0b       	sbc	r27, r19
 1b6:	e4 0b       	sbc	r30, r20
 1b8:	f5 0b       	sbc	r31, r21

000001ba <__udivmodsi4_ep>:
 1ba:	66 1f       	adc	r22, r22
 1bc:	77 1f       	adc	r23, r23
 1be:	88 1f       	adc	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	1a 94       	dec	r1
 1c4:	69 f7       	brne	.-38     	; 0x1a0 <__udivmodsi4_loop>
 1c6:	60 95       	com	r22
 1c8:	70 95       	com	r23
 1ca:	80 95       	com	r24
 1cc:	90 95       	com	r25
 1ce:	9b 01       	movw	r18, r22
 1d0:	ac 01       	movw	r20, r24
 1d2:	bd 01       	movw	r22, r26
 1d4:	cf 01       	movw	r24, r30
 1d6:	08 95       	ret

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
