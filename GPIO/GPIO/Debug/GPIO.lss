
GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000274  00000308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000274  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800114  00800114  0000031c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009b9  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000854  00000000  00000000  00000d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000371  00000000  00000000  000015d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00001944  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042c  00000000  00000000  000019c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000147  00000000  00000000  00001df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001f37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	59 c0       	rjmp	.+178    	; 0xc8 <__vector_5>
  16:	00 00       	nop
  18:	80 c0       	rjmp	.+256    	; 0x11a <__vector_6>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e7       	ldi	r30, 0x74	; 116
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 32       	cpi	r26, 0x22	; 34
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	87 d0       	rcall	.+270    	; 0x1d2 <main>
  c4:	d5 c0       	rjmp	.+426    	; 0x270 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_5>:

int SW_count[4];
int count = 0;
int Stop_count = 0;

SIGNAL(INT4_vect){
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
	
	if(state == STOP){
  d6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <state>
  da:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <state+0x1>
  de:	00 97       	sbiw	r24, 0x00	; 0
  e0:	39 f4       	brne	.+14     	; 0xf0 <__vector_5+0x28>
		state = GO;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <state+0x1>
  ea:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <state>
  ee:	0e c0       	rjmp	.+28     	; 0x10c <__vector_5+0x44>
	}
	else if(state == GO){
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	61 f4       	brne	.+24     	; 0x10c <__vector_5+0x44>
		
		state = STOP;
  f4:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <state+0x1>
  f8:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <state>
		Stop_count = count;
  fc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <count>
 100:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <count+0x1>
 104:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 108:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
	}
}
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <__vector_6>:

SIGNAL(INT5_vect){
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
	
	count = 0;
 124:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <count+0x1>
 128:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <count>
	Stop_count = 0;
 12c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x1>
 130:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
}
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <FND_Count>:

int FND_Count(int count){
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	ec 01       	movw	r28, r24

	SW_count[0] = (count / 10) % 10;
 144:	2a e0       	ldi	r18, 0x0A	; 10
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	b9 01       	movw	r22, r18
 14a:	6b d0       	rcall	.+214    	; 0x222 <__divmodhi4>
 14c:	cb 01       	movw	r24, r22
 14e:	b9 01       	movw	r22, r18
 150:	68 d0       	rcall	.+208    	; 0x222 <__divmodhi4>
 152:	ea e1       	ldi	r30, 0x1A	; 26
 154:	f1 e0       	ldi	r31, 0x01	; 1
 156:	91 83       	std	Z+1, r25	; 0x01
 158:	80 83       	st	Z, r24
	SW_count[1] = (count / 100) % 10;
 15a:	ce 01       	movw	r24, r28
 15c:	64 e6       	ldi	r22, 0x64	; 100
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	60 d0       	rcall	.+192    	; 0x222 <__divmodhi4>
 162:	cb 01       	movw	r24, r22
 164:	b9 01       	movw	r22, r18
 166:	5d d0       	rcall	.+186    	; 0x222 <__divmodhi4>
 168:	93 83       	std	Z+3, r25	; 0x03
 16a:	82 83       	std	Z+2, r24	; 0x02
	SW_count[2] = (count / 1000) % 10;
 16c:	ce 01       	movw	r24, r28
 16e:	68 ee       	ldi	r22, 0xE8	; 232
 170:	73 e0       	ldi	r23, 0x03	; 3
 172:	57 d0       	rcall	.+174    	; 0x222 <__divmodhi4>
 174:	cb 01       	movw	r24, r22
 176:	b9 01       	movw	r22, r18
 178:	54 d0       	rcall	.+168    	; 0x222 <__divmodhi4>
 17a:	95 83       	std	Z+5, r25	; 0x05
 17c:	84 83       	std	Z+4, r24	; 0x04
	SW_count[3] = (count / 10000) % 10;
 17e:	ce 01       	movw	r24, r28
 180:	60 e1       	ldi	r22, 0x10	; 16
 182:	77 e2       	ldi	r23, 0x27	; 39
 184:	4e d0       	rcall	.+156    	; 0x222 <__divmodhi4>
 186:	cb 01       	movw	r24, r22
 188:	b9 01       	movw	r22, r18
 18a:	4b d0       	rcall	.+150    	; 0x222 <__divmodhi4>
 18c:	97 83       	std	Z+7, r25	; 0x07
 18e:	86 83       	std	Z+6, r24	; 0x06
 190:	80 e0       	ldi	r24, 0x00	; 0

	for(int j = 0 ; j < 4 ; j++){
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	18 c0       	rjmp	.+48     	; 0x1c6 <FND_Count+0x88>
 196:	fc 01       	movw	r30, r24
		
		PORTB = FND2[j];
 198:	e0 50       	subi	r30, 0x00	; 0
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	20 81       	ld	r18, Z
 19e:	28 bb       	out	0x18, r18	; 24
 1a0:	fc 01       	movw	r30, r24
		PORTA = FND1[SW_count[j]];
 1a2:	ee 0f       	add	r30, r30
 1a4:	ff 1f       	adc	r31, r31
 1a6:	e6 5e       	subi	r30, 0xE6	; 230
 1a8:	fe 4f       	sbci	r31, 0xFE	; 254
 1aa:	01 90       	ld	r0, Z+
 1ac:	f0 81       	ld	r31, Z
 1ae:	e0 2d       	mov	r30, r0
 1b0:	ec 5f       	subi	r30, 0xFC	; 252
 1b2:	fe 4f       	sbci	r31, 0xFE	; 254
 1b4:	20 81       	ld	r18, Z
 1b6:	2b bb       	out	0x1b, r18	; 27
 1b8:	ea e4       	ldi	r30, 0x4A	; 74
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ba:	f4 e2       	ldi	r31, 0x24	; 36
 1bc:	31 97       	sbiw	r30, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <FND_Count+0x7e>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <FND_Count+0x84>
 1c2:	00 00       	nop
 1c4:	01 96       	adiw	r24, 0x01	; 1
	SW_count[0] = (count / 10) % 10;
	SW_count[1] = (count / 100) % 10;
	SW_count[2] = (count / 1000) % 10;
	SW_count[3] = (count / 10000) % 10;

	for(int j = 0 ; j < 4 ; j++){
 1c6:	84 30       	cpi	r24, 0x04	; 4
 1c8:	91 05       	cpc	r25, r1
 1ca:	2c f3       	brlt	.-54     	; 0x196 <FND_Count+0x58>
 1cc:	df 91       	pop	r29
	if(count > 99999){
		
		count = 0;
	}
	
};
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <main>:
 1d2:	8f ef       	ldi	r24, 0xFF	; 255

int main(){

	DDRA = 0xFF; // PORTA 의 출력 1111 1111 FND의 A~H 까지 연결
 1d4:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xF0; // PORTB 의 출력 1111 FND의 C0~C3까지 연결
 1d6:	80 ef       	ldi	r24, 0xF0	; 240
 1d8:	87 bb       	out	0x17, r24	; 23
	DDRE = 0x00; // PORTE 의 입력 0000 0000 E 의 입력은 스위치와 연결
 1da:	12 b8       	out	0x02, r1	; 2
	
    EIMSK = (1 << INT4) | (1 << INT5); // 외부 인터럽트 4, 5번 사용
 1dc:	80 e3       	ldi	r24, 0x30	; 48
 1de:	89 bf       	out	0x39, r24	; 57
    EICRB = (1 << ISC41) | (1 << ISC51); // 인터럽트 4, 5번 모두 하강에지에서 동작하도록 설계
 1e0:	8a e0       	ldi	r24, 0x0A	; 10
 1e2:	8a bf       	out	0x3a, r24	; 58
    sei();
 1e4:	78 94       	sei

	while(1){
		
        if(state == GO){
 1e6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <state>
 1ea:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <state+0x1>
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	91 05       	cpc	r25, r1
 1f2:	79 f4       	brne	.+30     	; 0x212 <main+0x40>
			FND_Count(count);
 1f4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <count>
 1f8:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <count+0x1>
 1fc:	a0 df       	rcall	.-192    	; 0x13e <FND_Count>
			count++;
 1fe:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <count>
 202:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <count+0x1>
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <count+0x1>
 20c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <count>
 210:	ea cf       	rjmp	.-44     	; 0x1e6 <main+0x14>
		}
		else if(state == STOP){
 212:	89 2b       	or	r24, r25
 214:	41 f7       	brne	.-48     	; 0x1e6 <main+0x14>
			FND_Count(Stop_count);
 216:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 21a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 21e:	8f df       	rcall	.-226    	; 0x13e <FND_Count>
 220:	e2 cf       	rjmp	.-60     	; 0x1e6 <main+0x14>

00000222 <__divmodhi4>:
 222:	97 fb       	bst	r25, 7
 224:	07 2e       	mov	r0, r23
 226:	16 f4       	brtc	.+4      	; 0x22c <__divmodhi4+0xa>
 228:	00 94       	com	r0
 22a:	06 d0       	rcall	.+12     	; 0x238 <__divmodhi4_neg1>
 22c:	77 fd       	sbrc	r23, 7
 22e:	08 d0       	rcall	.+16     	; 0x240 <__divmodhi4_neg2>
 230:	0b d0       	rcall	.+22     	; 0x248 <__udivmodhi4>
 232:	07 fc       	sbrc	r0, 7
 234:	05 d0       	rcall	.+10     	; 0x240 <__divmodhi4_neg2>
 236:	3e f4       	brtc	.+14     	; 0x246 <__divmodhi4_exit>

00000238 <__divmodhi4_neg1>:
 238:	90 95       	com	r25
 23a:	81 95       	neg	r24
 23c:	9f 4f       	sbci	r25, 0xFF	; 255
 23e:	08 95       	ret

00000240 <__divmodhi4_neg2>:
 240:	70 95       	com	r23
 242:	61 95       	neg	r22
 244:	7f 4f       	sbci	r23, 0xFF	; 255

00000246 <__divmodhi4_exit>:
 246:	08 95       	ret

00000248 <__udivmodhi4>:
 248:	aa 1b       	sub	r26, r26
 24a:	bb 1b       	sub	r27, r27
 24c:	51 e1       	ldi	r21, 0x11	; 17
 24e:	07 c0       	rjmp	.+14     	; 0x25e <__udivmodhi4_ep>

00000250 <__udivmodhi4_loop>:
 250:	aa 1f       	adc	r26, r26
 252:	bb 1f       	adc	r27, r27
 254:	a6 17       	cp	r26, r22
 256:	b7 07       	cpc	r27, r23
 258:	10 f0       	brcs	.+4      	; 0x25e <__udivmodhi4_ep>
 25a:	a6 1b       	sub	r26, r22
 25c:	b7 0b       	sbc	r27, r23

0000025e <__udivmodhi4_ep>:
 25e:	88 1f       	adc	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	5a 95       	dec	r21
 264:	a9 f7       	brne	.-22     	; 0x250 <__udivmodhi4_loop>
 266:	80 95       	com	r24
 268:	90 95       	com	r25
 26a:	bc 01       	movw	r22, r24
 26c:	cd 01       	movw	r24, r26
 26e:	08 95       	ret

00000270 <_exit>:
 270:	f8 94       	cli

00000272 <__stop_program>:
 272:	ff cf       	rjmp	.-2      	; 0x272 <__stop_program>
